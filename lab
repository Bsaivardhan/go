package main
import "fmt"
func lcm(temp1 int,temp2 int) {
var lcmnum int =1
if(temp1>temp2) {
lcmnum=temp1
}else{
lcmnum=temp2
}
for {
if(lcmnum%temp1==0 && lcmnum%temp2==0) { 
fmt.Printf("LCM of %d and %d is %d",temp1,temp2,lcmnum)
break
}
lcmnum++
}
return 
}
func gcd(temp1 int,temp2 int){
var gcdnum int
for i := 1; i <=temp1 && i <=temp2 ; i++ {
if(temp1%i==0 && temp2%i==0) {
gcdnum=i
}
}
fmt.Printf("GCD of %d and %d is %d",temp1,temp2,gcdnum)
return
}
func main() {
var n1,n2,action int
fmt.Println("Enter two positive integers : ")
fmt.Scanln(&n1)
fmt.Scanln(&n2)
fmt.Println("Enter 1 for LCM and 2 for GCD")
fmt.Scanln(&action)
switch action {
case 1:
lcm(n1,n2)
case 2:
gcd(n1,n2)
}
}

------------------------------------------------------------------
package main
import "fmt"
func main() {
var rows,k,temp,temp1 int
fmt.Print("Enter number of rows :")
fmt.Scan(&rows)
for i := 1; i <= rows; i++ {
for j := 1; j <= rows-i; j++ {
fmt.Print(" ")
temp++
}
for{
if( temp <= rows-1){
fmt.Printf(" %d",i+k)
temp++
}else{
temp1++
fmt.Printf(" %d",(i+k-2*temp1))
}
k++
if(k == 2*i-1){
break
}
}
temp = 0
temp1 = 0
k = 0
fmt.Println("")
}
}
--------------------------------------------------------------------
package main
import (
parent "family/father"
child "family/father/son"
"fmt"
)
func main() {
f := new(parent.Father)
fmt.Println(f.Data("Mr. Jeremy Maclin"))
c := new(child.Son)
fmt.Println(c.Data("Riley Maclin"))
}
package father
import "fmt"
func init() {
fmt.Println("Father package initialized")
}
type Father struct {
Name string
}
func (f Father) Data(name string) string {
f.Name = "Father : " + name
return f.Name
}
package son
import "fmt"
func init() {
fmt.Println("Son package initialized")
}
type Son struct {
Name string
}
func (s Son) Data(name string) string {
s.Name = "Son : " + name
return s.Name
}

-------------------------------------------------------------------------------------
package main
import (
"fmt"
"math"
)
func main(){
var num[10] float64
var sum,mean,sd float64
fmt.Println("****** Enter 10 elements *******")
for i := 1; i <= 10; i++ {
fmt.Printf("Enter %d element : ",i)
fmt.Scan(&num[i-1])
sum += num[i-1]
}
mean = sum/10;
for j := 0; j < 10; j++ {
float64
sd += math.Pow(num[j] - mean, 2)
}
sd = math.Sqrt(sd/10)
fmt.Println("The Standard Deviation is : ",sd)
}
--------------------------------------------------------------------------------
package main
import "fmt"
func main(){
var rows int
var temp int = 1
fmt.Print("Enter number of rows : ")
fmt.Scan(&rows)
for i := 1; i <= rows; i++ {
for k := 1; k <= i; k++ {
fmt.Printf(" %d",temp)
temp++
}
fmt.Println("")
}
}
-------------------------------------------------------------------------------
package main
import "fmt"
func main() {
fmt.Print("Enter First String: ")
to display output in same line
var first string
fmt.Scanln(&first) 
fmt.Print("Enter Second String: ")
var second string
fmt.Scanln(&second)
fmt.Print(first + second) 
string
}
------------------------------------------------------------------------------------
package main
import "fmt"
func main() {
fmt.Println("Golang program to check for palindrome")
var number,rem,temporary int
var reverse int = 0
number = 45454
temporary=number
for{
rem = number%10
reverse = reverse*10 + rem
number /= 10
if(number==0){
break // Break Statement used to exit from loop
}
}
if(temporary==reverse){
fmt.Printf("Number %d is a Palindrome",temporary)
}else{
fmt.Printf("Number %d is not a Palindrome",temporary)
}
}

