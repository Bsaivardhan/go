package main
import (
	"fmt"
	"html/template"
	"net/http"
)
type ContactDetails struct {
	Name    string
	Email   string
	Subject string
	Message string
}
func main() {
	tmpl := template.Must(template.ParseFiles("contact.html"))
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			tmpl.Execute(w, nil)
			return
		}
		ContactDetails := ContactDetails{
			Name:    r.FormValue("name"),
			Email:   r.FormValue("email"),
			Subject: r.FormValue("subject"),
			Message: r.FormValue("message"),
		}
		fmt.Printf("%+v\n", ContactDetails)
		tmpl.Execute(w, struct{ Success bool }{true})
	})

	http.ListenAndServe(":8080", nil)
}
{{if .Success}}
<p>Your message has been sent!</p>
{{else}}
<p>Contact</p>
<form action="/contact" method="POST">
    <label>Name:</label><br />
    <input type="text" name="name"><br />
    <label>Email:</label><br />
    <input type="text" name="email"><br />
    <label>Subject:</label><br />
    <input type="text" name="subject"><br />
    <label>Message:</label><br />
    <textarea name="message"></textarea><br /><br />
    <input type="submit">
</form>
{{end}}
-----------------------week9-----------------------------------------
package main
import "fmt"
func main() {
	var num [100]int
	var temp, sum, avg int
	fmt.Print("Enter number of elements: ")
	fmt.Scanln(&temp)
	for i := 0; i < temp; i++ {
		fmt.Print("Enter the number : ")
		fmt.Scanln(&num[i])
		sum += num[i]
	}
	avg = sum / temp
	fmt.Printf("The Average of entered %d number(s) is %d", temp, avg)
}
------------------------week 10--------------------------------------------
package main
import "fmt"
func removeDuplicates(s []string) []string {
	bucket := make(map[string]bool)
	var result []string
	for _, str := range s {
		if _, ok := bucket[str]; !ok {
			bucket[str] = true
			result = append(result, str)
		}
	}
	return result
}
func main() {
	array := []string{"hai", "cse", "batch", "2020", "cse", "hai", "section"}
	fmt.Println("The given array of string is:", array)
	fmt.Println()
	result := removeDuplicates(array)
	fmt.Println("The array obtained after removing the duplicate entries is:", result)
}
-----------------------------------------week11----------------------------------------------------
package main
import (
	"fmt"
	"sort"
)
func main() {
	fmt.Println("Interger Reverse Sort")
	num := []int{50, 90, 30, 10, 50}
	sort.Sort(sort.Reverse(sort.IntSlice(num)))
	fmt.Println(num)
	fmt.Println()
	fmt.Println("String Reverse Sort")
	text := []string{"Japan", "UK", "Germany", "Australia", "INDIA"}
	sort.Sort(sort.Reverse(sort.StringSlice(text)))
	fmt.Println(text)
}
------------------------------------------week12--------------------------------------------------------
package main
import (
	"fmt"
	"strings"
)
func main() {
	fmt.Println(strings.ContainsAny("Germany", "G"))
	fmt.Println(strings.ContainsAny("Germany", "g"))
	fmt.Println(strings.Contains("India", "In"))
	fmt.Println(strings.Contains("Germany", "ger"))
	fmt.Println(strings.Contains("Japan", "Jap"))
	fmt.Println(strings.Count("malayalam", "m"))
	fmt.Println(strings.Count("malayalam", "o"))
	fmt.Println(strings.EqualFold("Cat", "cAt"))
	fmt.Println(strings.EqualFold("India", "Indiana"))
}
------------------------------------------week14-------------------------------------------------------------
package main

import (
	"fmt"
	"runtime"
	"sync"
)

func main() {
	runtime.GOMAXPROCS(3)
	var processTest sync.WaitGroup
	processTest.Add(3)
	go func() {
		defer processTest.Done()
		for i := 0; i < 30; i++ {
			for j := 51; j <= 100; j++ {
				fmt.Printf(" %d", j)
				if j == 100 {
					fmt.Println()
				}
			}
		}
	}()
	go func() {
		defer processTest.Done()
		for j := 0; j < 10; j++ {
			for char := 'A'; char < 'A'+26; char++ {
				fmt.Printf("%c ", char)
				if char == 'Z' {
					fmt.Println()
				}
			}
		}
	}()
	go func() {
		defer processTest.Done()
		for i := 0; i < 30; i++ {
			for j := 0; j <= 50; j++ {
				fmt.Printf(" %d", j)
				if j == 50 {
					fmt.Println()
				}
			}
		}
	}()
	processTest.Wait()
}


------------------------------------------------------------
package main
import "fmt"
func lcm(temp1 int,temp2 int) {
var lcmnum int =1
if(temp1>temp2) {
lcmnum=temp1
}else{
lcmnum=temp2
}
for {
if(lcmnum%temp1==0 && lcmnum%temp2==0) { 
fmt.Printf("LCM of %d and %d is %d",temp1,temp2,lcmnum)
break
}
lcmnum++
}
return 
}
func gcd(temp1 int,temp2 int){
var gcdnum int
for i := 1; i <=temp1 && i <=temp2 ; i++ {
if(temp1%i==0 && temp2%i==0) {
gcdnum=i
}
}
fmt.Printf("GCD of %d and %d is %d",temp1,temp2,gcdnum)
return
}
func main() {
var n1,n2,action int
fmt.Println("Enter two positive integers : ")
fmt.Scanln(&n1)
fmt.Scanln(&n2)
fmt.Println("Enter 1 for LCM and 2 for GCD")
fmt.Scanln(&action)
switch action {
case 1:
lcm(n1,n2)
case 2:
gcd(n1,n2)
}
}

------------------------------------------------------------------
package main
import "fmt"
func main() {
var rows,k,temp,temp1 int
fmt.Print("Enter number of rows :")
fmt.Scan(&rows)
for i := 1; i <= rows; i++ {
for j := 1; j <= rows-i; j++ {
fmt.Print(" ")
temp++
}
for{
if( temp <= rows-1){
fmt.Printf(" %d",i+k)
temp++
}else{
temp1++
fmt.Printf(" %d",(i+k-2*temp1))
}
k++
if(k == 2*i-1){
break
}
}
temp = 0
temp1 = 0
k = 0
fmt.Println("")
}
}
--------------------------------------------------------------------
package main
import (
parent "family/father"
child "family/father/son"
"fmt"
)
func main() {
f := new(parent.Father)
fmt.Println(f.Data("Mr. Jeremy Maclin"))
c := new(child.Son)
fmt.Println(c.Data("Riley Maclin"))
}
package father
import "fmt"
func init() {
fmt.Println("Father package initialized")
}
type Father struct {
Name string
}
func (f Father) Data(name string) string {
f.Name = "Father : " + name
return f.Name
}
package son
import "fmt"
func init() {
fmt.Println("Son package initialized")
}
type Son struct {
Name string
}
func (s Son) Data(name string) string {
s.Name = "Son : " + name
return s.Name
}

-------------------------------------------------------------------------------------
package main
import (
"fmt"
"math"
)
func main(){
var num[10] float64
var sum,mean,sd float64
fmt.Println("****** Enter 10 elements *******")
for i := 1; i <= 10; i++ {
fmt.Printf("Enter %d element : ",i)
fmt.Scan(&num[i-1])
sum += num[i-1]
}
mean = sum/10;
for j := 0; j < 10; j++ {
float64
sd += math.Pow(num[j] - mean, 2)
}
sd = math.Sqrt(sd/10)
fmt.Println("The Standard Deviation is : ",sd)
}
--------------------------------------------------------------------------------
package main
import "fmt"
func main(){
var rows int
var temp int = 1
fmt.Print("Enter number of rows : ")
fmt.Scan(&rows)
for i := 1; i <= rows; i++ {
for k := 1; k <= i; k++ {
fmt.Printf(" %d",temp)
temp++
}
fmt.Println("")
}
}
-------------------------------------------------------------------------------
package main
import "fmt"
func main() {
fmt.Print("Enter First String: ")
to display output in same line
var first string
fmt.Scanln(&first) 
fmt.Print("Enter Second String: ")
var second string
fmt.Scanln(&second)
fmt.Print(first + second) 
string
}
------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"strings"
)

func isPalindrome(str string) bool {
	str = strings.ToLower(strings.ReplaceAll(str, " ", ""))
	for i, j := 0, len(str)-1; i < j; i, j = i+1, j-1 {
		if str[i] != str[j] {
			return false
		}
	}

	return true
}

func main() {
	var input string
	fmt.Print("Enter a string: ")
	fmt.Scanln(&input)

	if isPalindrome(input) {
		fmt.Println("The string is a palindrome.")
	} else {
		fmt.Println("The string is not a palindrome.")
	}
}

